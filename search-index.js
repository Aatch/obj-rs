var searchIndex = {};
searchIndex['obj'] = {"items":[[0,"","obj","[Wavefront OBJ][obj] parser for Rust. It handles both `.obj` and `.mtl` formats. [GitHub][]",null,null],[3,"Obj","","3D model object loaded from wavefront OBJ.",null,null],[12,"name","","Object's name.",0,null],[12,"vertices","","Vertex buffer.",0,null],[12,"indices","","Index buffer.",0,null],[3,"Vertex","","Vertex data type of `Obj` which contains position and normal data of a vertex.",null,null],[12,"position","","Position vector of a vertex.",1,null],[12,"normal","","Normal vertor of a vertex.",1,null],[3,"Position","","Vertex data type of `Obj` which contains only position data of a vertex.",null,null],[12,"position","","Position vector of a vertex.",2,null],[5,"load_obj","","Load a wavefront OBJ file into Rust & OpenGL friendly format.",null,{"inputs":[{"name":"t"}],"output":{"name":"objresult"}}],[0,"raw","","Provides low-level API for Wavefront OBJ format.",null,null],[0,"object","obj::raw","Parses `.obj` format which stores 3D mesh data",null,null],[3,"RawObj","obj::raw::object","Low-level Rust binding for `.obj` format.",null,null],[12,"name","","Name of the object.",3,null],[12,"material_libraries","","`.mtl` files which required by this object.",3,null],[12,"positions","","Position vectors of each vertex.",3,null],[12,"tex_coords","","Texture coordinates of each vertex.",3,null],[12,"normals","","Normal vectors of each vertex.",3,null],[12,"param_vertices","","Parametric vertices.",3,null],[12,"points","","Points which stores the index data of position vectors.",3,null],[12,"lines","","Lines which store the index data of vectors.",3,null],[12,"polygons","","Polygons which store the index data of vectors.",3,null],[12,"groups","","Groups of multiple geometries.",3,null],[12,"meshes","","Geometries which consist in a same material.",3,null],[12,"smoothing_groups","","Smoothing groups.",3,null],[12,"merging_groups","","Merging groups.",3,null],[3,"Group","","A group which contains ranges of points, lines and polygons",null,null],[12,"points","","Multiple range of points",4,null],[12,"lines","","Multiple range of lines",4,null],[12,"polygons","","Multiple range of polygons",4,null],[3,"Range","","A struct which represent `[start, end)` range.",null,null],[12,"start","","The lower bound of the range (inclusive).",5,null],[12,"end","","The upper bound of the range (exclusive).",5,null],[4,"Line","","The `Line` type.",null,null],[13,"P","","A line which contains only the position data of both ends",6,null],[13,"PT","","A line which contains both position and texture coordinate data of both ends",6,null],[4,"Polygon","","The `Polygon` type.",null,null],[13,"P","","A polygon which contains only the position data of each vertex.",7,null],[13,"PT","","A polygon which contains both position and texture coordinate data of each vertex.",7,null],[13,"PN","","A polygon which contains both position and normal data of each vertex.",7,null],[13,"PTN","","A polygon which contains all position, texture coordinate and normal data of each vertex.",7,null],[5,"parse_obj","","Parses a wavefront `.obj` format.",null,{"inputs":[{"name":"t"}],"output":{"name":"objresult"}}],[6,"Point","","The `Point` type which stores the index of the position vector.",null,null],[11,"fmt","","",6,{"inputs":[{"name":"line"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"eq","","",6,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"polygon"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"polygon"}],"output":{"name":"polygon"}}],[11,"eq","","",7,{"inputs":[{"name":"polygon"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"polygon"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"group"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"group"}],"output":{"name":"group"}}],[11,"fmt","","",5,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",5,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[0,"material","obj::raw","Parses `.mtl` format which stores material data",null,null],[3,"RawMtl","obj::raw::material","Low-level Rust binding for `.mtl` format *(incomplete)*.",null,null],[5,"parse_mtl","","Parses a wavefront `.mtl` format *(incomplete)*",null,{"inputs":[{"name":"t"}],"output":{"name":"objresult"}}],[11,"clone","","",8,{"inputs":[{"name":"rawmtl"}],"output":{"name":"rawmtl"}}],[6,"ObjResult","obj","A type for results generated by `load_obj` and `load_mtl` where the `Err` type is hard-wired to\n`ObjError`",null,null],[8,"FromRawVertex","","Conversion from `RawObj`'s raw data.",null,null],[10,"process","","Build vertex and index buffer from raw object data.",9,{"inputs":[{"name":"fromrawvertex"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"objresult"}}],[11,"fmt","","",1,{"inputs":[{"name":"vertex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"vertex"}],"output":{"name":"vertex"}}],[11,"eq","","",1,{"inputs":[{"name":"vertex"},{"name":"vertex"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"vertex"},{"name":"vertex"}],"output":{"name":"bool"}}],[11,"process","","",1,{"inputs":[{"name":"vertex"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"objresult"}}],[11,"fmt","","",2,{"inputs":[{"name":"position"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"eq","","",2,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"bool"}}],[11,"process","","",2,{"inputs":[{"name":"position"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"objresult"}}]],"paths":[[3,"Obj"],[3,"Vertex"],[3,"Position"],[3,"RawObj"],[3,"Group"],[3,"Range"],[4,"Line"],[4,"Polygon"],[3,"RawMtl"],[8,"FromRawVertex"]]};
searchIndex['vec_map'] = {"items":[[0,"","vec_map","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).",null,null],[3,"VecMap","","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"hash","","",1,{"inputs":[{"name":"vecmap"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"vecmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",2,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",3,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"fmt","","",1,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"]]};
initSearch(searchIndex);
