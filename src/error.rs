//! Contains helper structs for error handling

use std::result;
use std::io::Error;
use std::num::{ParseIntError, ParseFloatError};
use std::error::FromError;

/// A type for results generated by `load_obj` and `load_mtl` where the `Err` type is hard-wired to
/// `ObjError`
///
/// This typedef is generally used to avoid writing out `ObjError` directly and is otherwise a
/// direct mapping to `std::result::Result`.
pub type ObjResult<T> = result::Result<T, ObjError>;

#[derive(PartialEq, Clone, Debug)]
enum ObjError {
    Io(Error),
    ParseInt(ParseIntError),
    ParseFloat(ParseFloatError),
    Load(LoadError)
}

impl FromError<Error> for ObjError {
    fn from_error(err: Error) -> Self {
        ObjError::Io(err)
    }
}

impl FromError<ParseIntError> for ObjError {
    fn from_error(err: ParseIntError) -> Self {
        ObjError::ParseInt(err)
    }
}

impl FromError<ParseFloatError> for ObjError {
    fn from_error(err: ParseFloatError) -> Self {
        ObjError::ParseFloat(err)
    }
}

impl FromError<LoadError> for ObjError {
    fn from_error(err: LoadError) -> Self {
        ObjError::Load(err)
    }
}

/// The error type for parse operations and loading of the `Obj` struct.
#[derive(PartialEq, Eq, Clone, Debug)]
pub struct LoadError {
    kind: LoadErrorKind,
    desc: &'static str,
}

/// A list specifying general categories of load error.
#[derive(Copy, PartialEq, Eq, Clone, Debug)]
pub enum LoadErrorKind {
    /// Met unexpected statement.
    UnexpectedStatement,
    /// Received wrong number of arguments.
    WrongNumberOfArguments,
    /// Received unexpected type of arguments.
    WrongTypeOfArguments,
    /// Model should be triangulated first to be loaded properly.
    UntriangulatedModel,
    /// Model cannot be transformed into requested form.
    InsufficientData,
}

impl LoadError {
    /// Creates a new custom error from a specified kind/description.
    pub fn new(kind: LoadErrorKind, desc: &'static str) -> Self {
        LoadError { kind: kind, desc: desc }
    }
}

macro_rules! error {
    ($kind:ident, $desc:expr) => {
        return Err(
            ::std::error::FromError::from_error(
                $crate::error::LoadError::new(
                    $crate::error::LoadErrorKind::$kind, $desc
                )
            )
        )
    }
}
